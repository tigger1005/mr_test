use miller_rabin::is_prime;
use num_bigint::{BigUint, RandBigInt};
use num_integer::Integer;
use rand::rngs::ThreadRng;

// Multiplicated primes from 3 to 752
const SMALL_PRIMES: [u8; 130] = [
    0x17, 0xB1, 0x5F, 0x27, 0x04, 0x60, 0xEC, 0x0C, 0x57, 0x27, 0x36, 0xED, 0x1A, 0x6C, 0x0E, 0x24,
    0x86, 0xBF, 0xBB, 0xA5, 0x11, 0x12, 0x5E, 0x2B, 0x3A, 0xEA, 0x2E, 0xB0, 0x72, 0xD8, 0x6B, 0x32,
    0x22, 0x44, 0xD8, 0x5A, 0x1B, 0x28, 0x7F, 0x5E, 0xC7, 0x8E, 0xDB, 0xA5, 0x33, 0x68, 0x36, 0xBC,
    0x85, 0xC4, 0xEB, 0x77, 0x51, 0xF3, 0x54, 0xAE, 0xC8, 0x93, 0x4A, 0xCA, 0xD6, 0xB9, 0x4D, 0x6C,
    0x02, 0x6B, 0xDB, 0x5B, 0x93, 0xC2, 0x97, 0xF0, 0x50, 0xB3, 0x77, 0xD1, 0x2F, 0xEE, 0x9B, 0x82,
    0x21, 0x0A, 0x0A, 0x84, 0xD8, 0x17, 0x5A, 0x14, 0x48, 0x71, 0x6B, 0x55, 0x51, 0x4B, 0xBF, 0x26,
    0xC4, 0x83, 0x3E, 0xB2, 0x33, 0xD3, 0x24, 0xF7, 0x91, 0x2B, 0x95, 0xE2, 0x23, 0x8C, 0x0B, 0xF9,
    0x48, 0x62, 0x71, 0x16, 0x1E, 0xB6, 0xCD, 0x2D, 0x65, 0x5F, 0xC4, 0x30, 0x93, 0x33, 0x3E, 0xF4,
    0xE3, 0xE1,
];

pub fn get_prime_numer(rng: &mut ThreadRng, k: usize) -> (usize, usize) {
    let mut count_mr = 0;
    let mut count_pre = 0;
    let mut pos_prime: BigUint;
    let small_prime: BigUint = BigUint::from_bytes_be(&SMALL_PRIMES);

    loop {
        // Get odd random number
        pos_prime = rng.gen_biguint(1024);
        pos_prime.set_bit(0, true);

        // pos_prime.gcd(other)
        let array = pos_prime.to_bytes_le();
        // Pre test for divider 3, 5 and 17
        let cross_sum = array.iter().map(|x| *x as i32).sum::<i32>();
        if cross_sum % 3 == 0 || cross_sum % 5 == 0 || cross_sum % 17 == 0 {
            count_pre += 1;
            continue;
        }
        // Pre test for divider 11 and 23
        let cross_sum = array
            .iter()
            .enumerate()
            .map(|(i, x)| {
                if i.is_even() {
                    *x as i32
                } else {
                    -1 * (*x) as i32
                }
            })
            .sum::<i32>();
        if cross_sum % 11 == 0 || cross_sum % 23 == 0 {
            count_pre += 1;
            continue;
        }
        // Pre test for divider of prime between 3 and 353
        if pos_prime.gcd(&small_prime) != 1u32.into() {
            count_pre += 1;
            continue;
        }
        // Do extensive Miller-Rabin test
        count_mr += 1;
        if is_prime(&pos_prime, k) {
            break;
        }
    }
    (count_mr, count_pre)
}
